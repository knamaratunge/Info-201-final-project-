shiny::runApp()
runApp()
library(ggplot2)
runApp()
runApp()
library(maps)
library(ggplot2)
runApp()
runApp()
source("server.R")
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Yelp App"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("cities", label = h3("Cities"),
choices = citiez)
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Top 10", tableOutput("table")),
tabPanel("Map", plotOutput("map") ),
tabPanel("Random", tableOutput("random_table"))
)
)
)
))
library(shiny)
library(tidyr)
library(dplyr)
library(httr)
library(jsonlite)
library(maps)
library(ggplot2)
yelp_key <- "WIZ9vy0AqeqYf_pxMOmBFcSLnhhF4iZmgdlSdK2E3FOM7Zb8X3naitCp58p1pZIGypOIhi1Tdv020jQGNxHsmgv7D1I1cu3h_7cZkbvDqGGN3V7QZ3mSd4cTCXf8W3Yx"
id <- "e6EqQUv9rODp67CGhfDoBg"
get_business_list <-function(city_name) {
params <- list(  location = city_name, limit = 50)
response <- GET("https://api.yelp.com/v3/businesses/search",
add_headers('Authorization' = paste("Bearer", yelp_key)),
query = params)
content <- content(response, 'text')
data <- fromJSON(content)
return(data$businesses)
}
get_business_details <-function(id) {
##params <- list( id = id)
response <- GET(paste0("https://api.yelp.com/v3/businesses/", id),
add_headers('Authorization' = paste("Bearer", yelp_key)))
##query = params)
content <- content(response, 'text')
data <- fromJSON(content)
details <- data.frame(matrix(unlist(data)))
return(details)
}
##top 5 most populated cityz
us_citites <- us.cities
top_cities <- arrange(us_citites, desc(pop)) %>% slice(1:5) %>% select(name)
cities <- unlist(top_cities)
names(cities) <- cities
runApp()
library(shiny)
source("server.R")
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Yelp App"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("cities", label = h3("Cities"),
choices = citiez)
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Top 10", tableOutput("table")),
tabPanel("Map", plotOutput("map") ),
tabPanel("Random", tableOutput("random_table"))
)
)
)
))
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
get_business_list
??sample_n
rep_sample
rep_id_sample <- select(rep_personal_info, id)
runApp()
businesses <- get_business_list("Seattle")
View(businesses)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
??sample_n
runApp()
runApp()
runApp()
runApp()
??unlist
runApp()
runApp()
View(businesses)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
summarise(categories,count = n())
class(categories)
businesses <- get_business_list(input$cities)
categories <- businesses$categories
categories <- ldply(categories, data.frame)
class(categories)
View(categories)
top_categories <- group_by(categories, title)
View(top_categories)
top_categories <- group_by(categories, title) %>%
summarise(n=n())
top_categories <- group_by(categories, title) %>%
summarise(n=n())
top_categories <- group_by(categories, title) %>%
summarise()
top_categories <- group_by(categories, title)
top_categories <- group_by(categories, title) %>%
summarise(count = n())
top_categories <- group_by(categories, title)
top_categories <- group_by(categories, title)
top_categories
View(top_categories)
top_categories <- group_by(categories, title) %>%
summarise(count = n())
top_categories <- group_by(categories, title) %>%
summarise(n = n())
top_categories <- group_by(categories, title) %>%
summarise(n = n())
conflicts()
library(dplyr)
top_categories <- group_by(categories, title) %>%
summarise(n = n())
