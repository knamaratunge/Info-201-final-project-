## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
courses <- RemoveDigits(c("JSIS B 424", "INFO 201", "INFO 360"))
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
contains_number <- str_detect(courses, "[0-9]")
if (all(contains_number)) {
print("Oh no!")
} else {
print ("Yay!")
}
## a2-foundational-skills
## -------------------- Set up and Defining variables --------------------
## Install and load the the `stringr` package, which has a variety of built in functions that make working
## with string variables easier.  You may read more about stringr in Wickham & Grolemund "R for Data Science"
## http://r4ds.had.co.nz/strings.html
library(stringr)
library(lubridate)
## Create a numeric variable `my_age` that is equal to your age
my_age <- 21
## Create a variable `my_name` that is equal to your first name
my_name <- "Jamie"
## Using multiplication, create a variable `minutes_in_day` that is equal to the number of minutes in a day
minutes_in_day <- 60 * 24
## Using multiplication, create a variable `hours_in_year` that is the number of hours in a year
hours_in_year <- minutes_in_day * 365
## Create a variable `minutes_rule` that is a boolean value (TRUE/FALSE) by logical operations
## It should be TRUE if there are more minutes in a day than hours in a year, otherwise FALSE
minutes_rule <- minutes_in_day > hours_in_year
## Compute and print the following a bit useful numbers.
## Assign the results to suitably named variables.
##
## How many seconds are there in year?
seconds_in_year <- hours_in_year * 60
print(seconds_in_year)
## How many seconds is a typical human lifetime?
seconds_in_lifetime <- seconds_in_year * 79
print(seconds_in_lifetime)
## Age of the universe is 13.8 billion years.  What is it's age in seconds?
## Comment:
## If you estimate, based on timings on a small dataset, that your task on the full data
## takes more than this many seconds on a fast computers,
## we can safely say that your code fails :-)
age_of_universe <- seconds_in_year * 13800000000
print(age_of_universe)
### -------------------- Working with functions --------------------
## Write a function called `make_introduction` that takes in two arguments: name, and age.
## This function should return a string value that says something like "Hello, my name is {name}, and I'm
## {age} years old".
make_introduction <- function(name, age) {
paste0("Hello, my name is ", name, ", and I'm ",
age, " years old.")
}
## Create a variable `my_intro` by passing your variables `my_name` and `my_age` into your `make_introduction`
## function
my_intro <- make_introduction(my_name, my_age)
## Create a variable `casual_intro` by substituting "Hello, my name is ", with "Hey, I'm" in your `my_intro`
## variable
casual_intro <- str_replace(my_intro, "Hello, my name is", "Hey, I'm")
## Create a new variable `loud_intro`, which is your `my_intro` variable in all upper-case letters
loud_intro <- str_to_upper(my_intro)
## Create a new variable `quiet_intro`, which is your `my_intro` variable in all lower-case letters
quiet_intro <- str_to_lower(my_intro)
## Create a new variable capitalized, which is your `my_intro` variable with each word capitalized
## hint: consult the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
## Using the `str_count` function, create a variable `occurrences` that stores the # of times the letter "e"
## appears in `my_intro`
occurrences <- str_count(my_intro, "e")
## Write another function `double` that takes in a (numeric) variable and returns that variable times two
double <- function(x) {
return (x * 2)
}
## Using your `double` function, create a variable `minutes_in_two_days`, which is the number of minutes in
## two days
minutes_in_two_days <- double(minutes_in_day)
## Write another function `third_power` that takes in a value and returns that value cubed
third_power <- function(y) {
return (y * y * y)
}
## Create a variable `twenty_seven`` by passing the number 3 to your `cube` function
twenty_seven <- third_power(3)
### ------------------------------ working with vectors ------------------------------
## Create a vector `movies` that contains the names of six movies you like
movies <- c("Kimi No Na Wa", "Welcome to Dongmakgol",
"School of Rock", "Lilo and Stitch",
"A Christmas Story",  "8 Below")
## Create a vector `top_three` that only contains the first three movies in the vector.
## Use indexing.
top_three <- c(movies[1:3])
## Using your vector and the paste method, create a vector `excited` that adds the phrase -
## " is a great movie!" to the end of each element in your movies vector
excited <- c(paste(movies[1:6], "is a great movie!"))
## Create a vector `without_four` that has your first three movies, and your 5th and 6th movies.
without_four <- movies[-4]
## Create a vector `numbers` that is the numbers 700 through 999
numbers <- seq(700, 999)
## Using the built in length function, create a variable `len` that is equal to the length of your vector
## `numbers`
len <- length(numbers)
## Using the `mean` function, create a variable `numbers_mean` that is the mean of your vector `numbers`
numbers_mean <- mean(numbers)
## Using the `median` function, create a variable `numbers_median` that is the median of your vector `numbers`
numbers_median <- median(numbers)
## Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- seq(500, 699)
## Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
all_numbers <- c(lower_numbers, numbers)
### -------------------- Dates --------------------
## you may also consult 'lubridate' package for additional date-time functionality
## Use the `as.Date()` function to create a variable `today` that represents today's date
## You can pass in a character string of the day you wrote this, or you can get the current date
## Hint: check documentation for 'Sys.time' and 'Sys.Date'
today <- as.Date("2018-10-15")
## Create a variable `winter_break` that represents the first day of winter break (Dec 15, 2018).
## Make sure to use the `as.Date` function again
winter_break <- as.Date("2018-12-15")
## Create a variable `days_to_break` that is how many days until break (hint: subtract the dates!)
days_to_break <- winter_break - today
## Define a function called `bday_intro` that takes in three arguments:
## a name, an age, and a character string for your next (upcoming) birthday.
## This method should return a character string of the format:
##  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `make_introduction` function from Part 1, and compute {N} and {new_age} in your
## function
bday_intro <- function(name, age, birthday) {
birthday_date <- as.Date(birthday)
days_until <- birthday_date - Sys.Date()
new_age <- age + 1
paste0(make_introduction(name, age), " In ",
days_until, " days I'll be ", new_age)
}
## Create a variable `my_bday_intro` using the `bday_intro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- bday_intro(my_name, my_age, "2019-09-03")
## Note: you may look up 'lubridate' package by Hadley Wickham for more convenient handling of dates
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
RemoveDigits <- function(words) {
gsub("[0-9]", "", words)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
courses <- RemoveDigits(c("JSIS B 424", "INFO 201", "INFO 360"))
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
contains_number <- str_detect(courses, "[0-9]")
if (all(contains_number)) {
print("Oh no!")
} else {
print ("Yay!")
}
minutes_rule <- minutes_in_day > hours_in_year
## a2-foundational-skills
## -------------------- Set up and Defining variables --------------------
## Install and load the the `stringr` package, which has a variety of built in functions that make working
## with string variables easier.  You may read more about stringr in Wickham & Grolemund "R for Data Science"
## http://r4ds.had.co.nz/strings.html
library(stringr)
library(lubridate)
## Create a numeric variable `my_age` that is equal to your age
my_age <- 21
## Create a variable `my_name` that is equal to your first name
my_name <- "Jamie"
## Using multiplication, create a variable `minutes_in_day` that is equal to the number of minutes in a day
minutes_in_day <- 60 * 24
## Using multiplication, create a variable `hours_in_year` that is the number of hours in a year
hours_in_year <- minutes_in_day * 365
## Create a variable `minutes_rule` that is a boolean value (TRUE/FALSE) by logical operations
## It should be TRUE if there are more minutes in a day than hours in a year, otherwise FALSE
minutes_rule <- minutes_in_day > hours_in_year
## Compute and print the following a bit useful numbers.
## Assign the results to suitably named variables.
##
## How many seconds are there in year?
seconds_in_year <- hours_in_year * 60
print(seconds_in_year)
## How many seconds is a typical human lifetime?
seconds_in_lifetime <- seconds_in_year * 79
print(seconds_in_lifetime)
## Age of the universe is 13.8 billion years.  What is it's age in seconds?
## Comment:
## If you estimate, based on timings on a small dataset, that your task on the full data
## takes more than this many seconds on a fast computers,
## we can safely say that your code fails :-)
age_of_universe <- seconds_in_year * 13800000000
print(age_of_universe)
### -------------------- Working with functions --------------------
## Write a function called `make_introduction` that takes in two arguments: name, and age.
## This function should return a string value that says something like "Hello, my name is {name}, and I'm
## {age} years old".
make_introduction <- function(name, age) {
paste0("Hello, my name is ", name, ", and I'm ",
age, " years old.")
}
## Create a variable `my_intro` by passing your variables `my_name` and `my_age` into your `make_introduction`
## function
my_intro <- make_introduction(my_name, my_age)
## Create a variable `casual_intro` by substituting "Hello, my name is ", with "Hey, I'm" in your `my_intro`
## variable
casual_intro <- str_replace(my_intro, "Hello, my name is", "Hey, I'm")
## Create a new variable `loud_intro`, which is your `my_intro` variable in all upper-case letters
loud_intro <- str_to_upper(my_intro)
## Create a new variable `quiet_intro`, which is your `my_intro` variable in all lower-case letters
quiet_intro <- str_to_lower(my_intro)
## Create a new variable capitalized, which is your `my_intro` variable with each word capitalized
## hint: consult the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
## Using the `str_count` function, create a variable `occurrences` that stores the # of times the letter "e"
## appears in `my_intro`
occurrences <- str_count(my_intro, "e")
## Write another function `double` that takes in a (numeric) variable and returns that variable times two
double <- function(x) {
return (x * 2)
}
## Using your `double` function, create a variable `minutes_in_two_days`, which is the number of minutes in
## two days
minutes_in_two_days <- double(minutes_in_day)
## Write another function `third_power` that takes in a value and returns that value cubed
third_power <- function(y) {
return (y * y * y)
}
## Create a variable `twenty_seven`` by passing the number 3 to your `cube` function
twenty_seven <- third_power(3)
### ------------------------------ working with vectors ------------------------------
## Create a vector `movies` that contains the names of six movies you like
movies <- c("Kimi No Na Wa", "Welcome to Dongmakgol",
"School of Rock", "Lilo and Stitch",
"A Christmas Story",  "8 Below")
## Create a vector `top_three` that only contains the first three movies in the vector.
## Use indexing.
top_three <- c(movies[1:3])
## Using your vector and the paste method, create a vector `excited` that adds the phrase -
## " is a great movie!" to the end of each element in your movies vector
excited <- c(paste(movies[1:6], "is a great movie!"))
## Create a vector `without_four` that has your first three movies, and your 5th and 6th movies.
without_four <- movies[-4]
## Create a vector `numbers` that is the numbers 700 through 999
numbers <- seq(700, 999)
## Using the built in length function, create a variable `len` that is equal to the length of your vector
## `numbers`
len <- length(numbers)
## Using the `mean` function, create a variable `numbers_mean` that is the mean of your vector `numbers`
numbers_mean <- mean(numbers)
## Using the `median` function, create a variable `numbers_median` that is the median of your vector `numbers`
numbers_median <- median(numbers)
## Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- seq(500, 699)
## Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
all_numbers <- c(lower_numbers, numbers)
### -------------------- Dates --------------------
## you may also consult 'lubridate' package for additional date-time functionality
## Use the `as.Date()` function to create a variable `today` that represents today's date
## You can pass in a character string of the day you wrote this, or you can get the current date
## Hint: check documentation for 'Sys.time' and 'Sys.Date'
today <- as.Date("2018-10-15")
## Create a variable `winter_break` that represents the first day of winter break (Dec 15, 2018).
## Make sure to use the `as.Date` function again
winter_break <- as.Date("2018-12-15")
## Create a variable `days_to_break` that is how many days until break (hint: subtract the dates!)
days_to_break <- winter_break - today
## Define a function called `bday_intro` that takes in three arguments:
## a name, an age, and a character string for your next (upcoming) birthday.
## This method should return a character string of the format:
##  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `make_introduction` function from Part 1, and compute {N} and {new_age} in your
## function
bday_intro <- function(name, age, birthday) {
birthday_date <- as.Date(birthday)
days_until <- birthday_date - Sys.Date()
new_age <- age + 1
paste0(make_introduction(name, age), " In ",
days_until, " days I'll be ", new_age)
}
## Create a variable `my_bday_intro` using the `bday_intro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- bday_intro(my_name, my_age, "2019-09-03")
## Note: you may look up 'lubridate' package by Hadley Wickham for more convenient handling of dates
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
RemoveDigits <- function(words) {
gsub("[0-9]", "", words)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
courses <- RemoveDigits(c("JSIS B 424", "INFO 201", "INFO 360"))
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
contains_number <- str_detect(courses, "[0-9]")
if (all(contains_number)) {
print("Oh no!")
} else {
print ("Yay!")
}
source('~/Desktop/INFO201/a5-api-report-jamiekiok/process_data.R')
civic_api_data <- get_civic_data(address)
address <- "Seattle, WA"
rm(list=ls())
address <- "Seattle, WA"
civic_api_data <- get_civic_data(address)
source("process_data.R")
civic_api_data <- get_civic_data(address)
---
title: "Who Represents You?"
output:
html_document: default
css: styles.css
---
```{r init, include=FALSE, message = FALSE}
source("~/Desktop/keys.R")
library(dplyr)
library(knitr)
library(lubridate)
knitr::opts_chunk$set(error=TRUE)
```
```{r address, include=FALSE}
address <- "Seattle, WA"
```
```{r processData, echo = FALSE, warning = FALSE, message=FALSE}
source("process_data.R")
civic_api_data <- get_civic_data(address)
civic_extracted_data <- extract_civic_data(civic_api_data)
civic_data_formatted <- format_civic_data(civic_extracted_data)
propub_api_data <- get_propub_api_data(address)
propub_extracted_data <- extract_propub_data(propub_api_data)
representative_data <- get_random_representative(propub_extracted_data)
```
source("process_data.R")
civic_api_data <- get_civic_data(address)
civic_extracted_data <- extract_civic_data(civic_api_data)
civic_data_formatted <- format_civic_data(civic_extracted_data)
propub_api_data <- get_propub_api_data(address)
propub_extracted_data <- extract_propub_data(propub_api_data)
representative_data <- get_random_representative(propub_extracted_data)
View(civic_data_formatted)
View(civic_api_data)
View(civic_extracted_data)
View(civic_data_formatted)
View(civic_api_data)
View(civic_data_formatted)
address <- "Seattle, WA"
source("~/Desktop/keys.R")
library(dplyr)
library(knitr)
knitr::opts_chunk$set(error=TRUE)
source("process_data.R")
civic_api_data <- get_civic_data(address)
civic_extracted_data <- extract_civic_data(civic_api_data)
civic_data_formatted <- format_civic_data(civic_extracted_data)
propub_api_data <- get_propub_api_data(address)
propub_extracted_data <- extract_propub_data(propub_api_data)
representative_data <- get_random_representative(propub_extracted_data)
View(civic_extracted_data)
source("process_data.R")
civic_api_data <- get_civic_data(address)
civic_extracted_data <- extract_civic_data(civic_api_data)
civic_data_formatted <- format_civic_data(civic_extracted_data)
propub_api_data <- get_propub_api_data(address)
propub_extracted_data <- extract_propub_data(propub_api_data)
representative_data <- get_random_representative(propub_extracted_data)
View(representative_data)
representative_data <- get_random_representative(propub_api_data)
address <- "San Francisco, CA"
View(representative_data)
address <- "San Francisco, CA"
source("process_data.R")
civic_api_data <- get_civic_data(address)
propub_api_data <- get_propub_api_data(address)
representative_data <- get_random_representative(propub_api_data)
View(representative_data)
View(representative_data)
source("process_data.R")
civic_api_data <- get_civic_data(address)
propub_api_data <- get_propub_api_data(address)
representative_data <- get_random_representative(propub_api_data)
View(representative_data)
View(civic_api_data)
shiny::runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/ch16-shiny/in-class-example')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
?req()
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
?selectInput()
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
install.packages("shinyWidgets")
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
runApp('Desktop/INFO201/a8-app-jamiekiok')
ufo_df <- read.csv(file = "data/UFOCoords.csv.bz2", stringsAsFactors = FALSE)
setwd("~/Desktop/INFO201/a8-app-jamiekiok")
ufo_df <- read.csv(file = "data/UFOCoords.csv.bz2", stringsAsFactors = FALSE)
ufo_df <- read.csv(file = "data/UFOCoords.csv.bz2", stringsAsFactors = FALSE)
usa_ufo_df <- ufo_df %>%
filter(Country == "USA") %>%
filter(lng > -130 & lat > 25 & lat < 50) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y")) %>%
mutate(month = month(Date))
View(usa_ufo_df)
runApp()
runApp()
runApp()
rm(ls=ls())
rm(list=ls())
shiny::runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
rlang::last_error()
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp()
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
yelp_price_levels[1]
yelp_price_levels <- c("hi", "2")
yelp_price_levels[1]
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
?axis()
?c()
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
geom_bar()
?geom_bar
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
runApp('~/Desktop/INFO201/Info-201-final-project-/yelpapp')
shiny::runApp()
install.packages("plotly")
runApp()
install.packages("RColorBrewer")
install.packages("RColorBrewer")
shiny::runApp()
?scale_fill_distiller()
runApp()
?colorRampPalette()
install.packages("colorRamp")
runApp()
runApp()
?colnames()
runApp()
runApp()
